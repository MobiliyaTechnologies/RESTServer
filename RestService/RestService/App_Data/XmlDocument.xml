<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RestService</name>
    </assembly>
    <members>
        <member name="P:RestService.OpenIdConnectCachingSecurityTokenProvider.Issuer">
            <summary>
            Gets the issuer the credentials are for.
            </summary>
            <value>
            The issuer the credentials are for.
            </value>
        </member>
        <member name="P:RestService.OpenIdConnectCachingSecurityTokenProvider.SecurityTokens">
            <summary>
            Gets all known security tokens.
            </summary>
            <value>
            All known security tokens.
            </value>
        </member>
        <member name="M:RestService.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:RestService.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,RestService.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:RestService.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:RestService.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:RestService.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:RestService.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,RestService.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,RestService.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(RestService.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:RestService.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:RestService.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},RestService.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="T:RestService.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:RestService.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:RestService.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleKey.#ctor(RestService.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:RestService.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RestService.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,RestService.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:RestService.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:RestService.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:RestService.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:RestService.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:RestService.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:RestService.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="M:RestService.Controllers.AlertController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.AlertController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.AlertController.GetAllAlerts">
            <summary>
            Gets all alerts.
            </summary>
            <returns>The alerts.</returns>
        </member>
        <member name="M:RestService.Controllers.AlertController.GetAlertDetails(System.Int32)">
            <summary>
            Gets the alert details for given sensor log id.
            </summary>
            <param name="sensorLogId">The sensor log identifier.</param>
            <returns>The alert model if found else a not found error response. </returns>
        </member>
        <member name="M:RestService.Controllers.AlertController.AcknowledgeAlert(RestService.Models.AlertModel)">
            <summary>
            Acknowledges the alert.
            </summary>
            <param name="alertDetail">The alert detail.</param>
            <returns>The acknowledgment confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.AlertController.GetRecommendations">
            <summary>
            Gets the recommendation type alerts.
            </summary>
            <returns>The recommendation's alerts.</returns>
        </member>
        <member name="M:RestService.Controllers.AlertController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.AnomalyController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.AnomalyController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.AnomalyController.GetAnomalyDetailsByDay(System.String)">
            <summary>
            Gets the anomaly details for given date.
            </summary>
            <param name="timestamp">The date.</param>
            <returns>The anomaly info models.</returns>
        </member>
        <member name="M:RestService.Controllers.AnomalyController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.ApplicationConfigurationController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.GetAllApplicationConfiguration">
            <summary>
            Gets all application configuration.
            </summary>
            <returns>The application configueations.</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.GetApplicationConfiguration(System.String)">
            <summary>
            Gets the application configuration for given configuration type.
            </summary>
            <param name="applicationConfigurationType">Type of the application configuration.</param>
            <returns>The application configuration if fount else a not found error response.</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.AddApplicationConfiguration(RestService.Models.ApplicationConfigurationModel)">
            <summary>
            Adds the application configuration.
            This API is accessible to only super admin user.
            </summary>
            <param name="applicationConfigurationModel">The application configuration model.</param>
            <returns>The application configuration creation confirmation, or bad request error response if invalid input parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.DeleteApplicationConfiguration(System.String)">
            <summary>
            Deletes the application configuration for given configuration type.
            This API is accessible to only super admin user.
            </summary>
            <param name="applicationConfigurationType">Type of the application configuration.</param>
            <returns>The deletion confirmation</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.UpdateApplicationConfigurationEntry(RestService.Models.ApplicationConfigurationEntryModel)">
            <summary>
            Updates the application configuration entry.
            Id is required to update application configuration entry other fields are optional, passed only fields required to update.
            This API is accessible to only super admin user.
            </summary>
            <param name="applicationConfigurationEntryModel">The application configuration entry model.</param>
            <returns>The modification confirmation, or bad request error response if invalid input parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.DeleteApplicationConfigurationEntry(System.Int32)">
            <summary>
            Deletes the application configuration entry for given id.
            This API is accessible to only super admin user.
            </summary>
            <param name="applicationConfigurationEntryId">The application configuration entry identifier.</param>
            <returns>The deletion confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.ApplicationConfigurationController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.BuildingController.GetAllBuildings">
            <summary>
            Gets all building details.
            </summary>
            <returns>The building details.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.GetBuildingByID(System.Int32)">
            <summary>
            Gets the building by identifier.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The building detail if found else not found error response, or bad request error response if invalid building id.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.GetBuildingsByCampus(System.Int32)">
            <summary>
            Gets the buildings by campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>The building details.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.GetBuildingByLocation(System.Decimal,System.Decimal)">
            <summary>
            Gets the building by location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The building detail if found else not found error response, or bad request error response if invalid location details.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.AddBuilding(RestService.Models.BuildingModel)">
            <summary>
            Adds the building.
            </summary>
            <param name="buildingModel">The building model.</param>
            <returns>The building created confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.UpdateBuilding(RestService.Models.BuildingModel)">
            <summary>
            Updates the building.
            Building id is required to update building details other fields are optional, passed only fields required to update.
            Building name and description are only modifiable fields.
            </summary>
            <param name="buildingModel">The building model.</param>
            <returns>The building updated confirmation, or bad request error response if invalid parameters. </returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.DeleteBuilding(System.Int32)">
            <summary>
            Deletes the building for given id.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The building deleted confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.BuildingController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.CampusController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.CampusController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.CampusController.GetAllCampus">
            <summary>
            Gets all campus.
            </summary>
            <returns>The CampusDetails</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.GetCampusByID(System.Int32)">
            <summary>
            Gets the campus by identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>The campus detail if found else not found error response, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.GetCampusByLocation(System.Decimal,System.Decimal)">
            <summary>
            Gets the campus by location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The campus detail if found else not found error response, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.AddCampus(RestService.Models.CampusModel)">
            <summary>
            Adds the campus.
            This API is accessible to only super admin user.
            </summary>
            <param name="campusModel">The campus model.</param>
            <returns>The campus created confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.UpdateCampus(RestService.Models.CampusModel)">
            <summary>
            Updates the campus.
            Campus id is required to update campus other fields are optional, passed only fields required to update.
            </summary>
            <param name="campusModel">The campus model.</param>
            <returns>The campus update confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.DeleteCampus(System.Int32)">
            <summary>
            Deletes the campus for given campus identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>The campus deleted confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.AssignRoleToCampus(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Assigns the role to campus.
            This API is accessible to only super admin user.
            </summary>
            <param name="roleIds">The role ids.</param>
            <param name="campusId">The campus identifier.</param>
            <returns>The role assigned confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.AddBuildingsToCampus(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds the buildings to campus.
            This API is accessible to only super admin user.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <param name="buildingIds">The building ids.</param>
            <returns>The building assigned confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.CampusController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.ClassroomController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.ClassroomController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.ClassroomController.GetAllClassrooms">
            <summary>
            Gets all classrooms.
            </summary>
            <returns>The classroom details.</returns>
        </member>
        <member name="M:RestService.Controllers.ClassroomController.GetClassroomByBuilding(System.Int32)">
            <summary>
            Gets the classroom by building.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The classroom details.</returns>
        </member>
        <member name="M:RestService.Controllers.ClassroomController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.EmailController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.EmailController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.EmailController.SendMail(RestService.Models.EmailModel)">
            <summary>
            Sends the email.
            </summary>
            <param name="emailModel">The email model.</param>
            <returns>The email send confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.EmailController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.FeedbackController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.DeleteFeedback(System.Int32)">
            <summary>
            Deletes the feedback for given identifier.
            </summary>
            <param name="feedbackId">The feedback identifier.</param>
            <returns>The feedback deleted confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.UpdateFeedback(RestService.Models.FeedbackModel)">
            <summary>
            Updates the feedback.
            Feedback id is required to update feedback other fields are optional, passed only fields required to update.
            </summary>
            <param name="feedbackdetail">The feedback detail.</param>
            <returns>The feedback updated confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.StoreFeedback(RestService.Models.FeedbackModel)">
            <summary>
            Stores the feedback.
            </summary>
            <param name="feedbackdetail">The feedback detail.</param>
            <returns>The feedback created confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.GetAllFeedback">
            <summary>
            Gets all feedback.
            </summary>
            <returns>The feedback details.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.GetFeedbackCount(System.Int32)">
            <summary>
            Gets the feedback count details for given class identifier.
            </summary>
            <param name="classId">The class identifier.</param>
            <returns>The feedback details, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.ResetFeedback">
            <summary>
            Resets the feedback.
            </summary>
            <returns>The feedback reset confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.FeedbackController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.InsightController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.InsightController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.InsightController.GetInsightData">
            <summary>
            Gets the insight data.
            </summary>
            <returns>The detail of consumption and prediction of current week.</returns>
        </member>
        <member name="M:RestService.Controllers.InsightController.GetInsightDataByBuilding(System.Int32)">
            <summary>
            Gets the insight data by building.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The detail of consumption and prediction of current week.</returns>
        </member>
        <member name="M:RestService.Controllers.InsightController.GetInsightDataByCampus(System.Int32)">
            <summary>
            Gets the insight data by campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>The detail of consumption and prediction of current week.</returns>
        </member>
        <member name="M:RestService.Controllers.InsightController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.MeterController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.MeterController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetMeterList(System.Int32)">
            <summary>
            Gets the meter list for given building identifier.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The meter details.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetMeterMonthlyConsumption(System.Int32)">
            <summary>
            Gets the meter monthly consumption for given building identifier.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The meter monthly consumption.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetMeterDailyConsumption(System.Int32)">
            <summary>
            Gets the today's meter daily consumptions for given building identifier.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The meter daily consumption.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetMonthWiseConsumption(System.Int32,System.Int32)">
            <summary>
            Gets the month wise consumptions for given building identifier and year.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <param name="year">The year.</param>
            <returns>The meter's month wise consumption.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetWeekWiseMonthlyConsumption(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the week wise monthly consumption for given building identifier, month and year.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <param name="month">The abbreviated month.(e.g - 'jan')</param>
            <param name="year">The year.</param>
            <returns>The meter's week wise consumption</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetDayWiseMonthlyConsumption(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the meter day wise consumptions for given building identifier, month and year.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <param name="month">The abbreviated month.(e.g - 'jan')</param>
            <param name="year">The year.</param>
            <returns>The meter day wise consumption.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetDayWiseNextMonthConsumptionPrediction(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the meter day wise next month consumption prediction for given building identifier, month and year.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <param name="month">The abbreviated month.(e.g - 'jan')</param>
            <param name="year">The year.</param>
            <returns>The meter day wise next month consumption prediction.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.GetDayWiseCurrentMonthConsumptionPrediction(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the meter day wise current month consumption prediction for given building identifier, month and year.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <param name="month">The abbreviated month.(e.g - 'jan')</param>
            <param name="year">The year.</param>
            <returns>The meter day wise current month consumption prediction.</returns>
        </member>
        <member name="M:RestService.Controllers.MeterController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.PiServerController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.PiServerController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.PiServerController.GetAllPiServers">
            <summary>
            Gets all pi servers.
            </summary>
            <returns>The PiServer details.</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.GetPiServerByID(System.Int32)">
            <summary>
            Gets the pi server by identifier.
            </summary>
            <param name="piServerID">The pi server identifier.</param>
            <returns>The PiServer detail if found else not found error message.</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.GetPiServerByName(System.String)">
            <summary>
            Gets the pi server by it's unique name.
            </summary>
            <param name="piServerName">Name of the pi server.</param>
            <returns>The PiServer detail if found else not found error response, or bad request error response if invalid PiServer name.</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.AddPiServer">
            <summary>
            Adds the pi server.
            It receive only multipart/form-data content-type.
            Required fields - CampusId, PiServerName(must be unique), PiServerURL and CSV campus schedule file
            Sample request -
            {  "PiServerID": 0,  "PiServerName": "", "PiServerDesc": "",  "CampusID": 1,  "PiServerURL": ""}
            Campus schedule file with any name but must be CSV type.
            </summary>
            <returns>The PiServer added confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.UpdatePiServer">
            <summary>
            Updates the pi server.
            It receive only multipart/form-data content-type.
            Required fields - PiServerID and fields to update.
            Sample request -
            {  "PiServerID": 0,  "PiServerName": "", "PiServerDesc": "",  "CampusID": 1,  "PiServerURL": ""}
            Campus schedule file with any name but must be CSV type, it's optional post only to update existing campus schedule.
            </summary>
            <returns>The PiServer updated confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.DeletePiServer(System.Int32)">
            <summary>
            Deletes the pi server for given PiServer identifier.
            </summary>
            <param name="piServerId">The pi server identifier.</param>
            <returns>The PiServer deleted confirmation</returns>
        </member>
        <member name="M:RestService.Controllers.PiServerController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.QuestionController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.QuestionController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.QuestionController.GetQuestionAnswers">
            <summary>
            Gets the question answers.
            </summary>
            <returns>The question and it's answers.</returns>
        </member>
        <member name="M:RestService.Controllers.QuestionController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.RoleController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.RoleController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.RoleController.GetAllRoles">
            <summary>
            Gets all roles.
            This API is accessible to only super admin user.
            </summary>
            <returns>The role details.</returns>
        </member>
        <member name="M:RestService.Controllers.RoleController.GetRoleByID(System.Int32)">
            <summary>
            Gets the role by identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="roleId">The role identifier.</param>
            <returns>The role detail if found else not found error response, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.RoleController.AddRole(RestService.Models.RoleModel)">
            <summary>
            Adds the role.
            This API is accessible to only super admin user.
            </summary>
            <param name="roleModel">The role model.</param>
            <returns>The role added confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.RoleController.UpdateRole(RestService.Models.RoleModel)">
            <summary>
            Updates the role.
            Role id is required to update role details other fields are optional, passed only fields required to update.
            This API is accessible to only super admin user.
            </summary>
            <param name="roleModel">The role model.</param>
            <returns>The role updated confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.RoleController.DeleteRole(System.Int32)">
            <summary>
            Deletes the role for given role identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="roleId">The role identifier.</param>
            <returns>The role deleted confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.RoleController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.SensorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.SensorController" /> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.SensorController.GetAllSensors">
            <summary>
            Gets all sensors.
            </summary>
            <returns>The sensor details.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.GetAllMapSensors">
            <summary>
            Gets all sensors mapped to class.
            </summary>
            <returns>The sensor details.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.GetAllUnMapSensors">
            <summary>
            Gets all sensors unmapped to class.
            </summary>
            <returns>The sensor details.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.MapSensor(System.Int32,System.Int32)">
            <summary>
            Maps the sensor to class.
            </summary>
            <param name="sensorId">The sensor identifier.</param>
            <param name="classId">The class identifier.</param>
            <returns>The sensor class mapping confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.GetAllSensorsForClass(System.Int32)">
            <summary>
            Gets all sensors for class.
            </summary>
            <param name="classId">The class identifier.</param>
            <returns>The sensor details, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.ResetSensors">
            <summary>
            Resets the sensors.
            </summary>
            <returns>The sensor reset confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.SensorController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.UniversityController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Controllers.UniversityController"/> class.
            </summary>
        </member>
        <member name="M:RestService.Controllers.UniversityController.GetAllUniversities">
            <summary>
            Gets all universities.
            This API is accessible to only super admin user.
            </summary>
            <returns>The university details.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.GetUniversityByID(System.Int32)">
            <summary>
            Gets the university by identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="universityID">The university identifier.</param>
            <returns>The university detail if found else not found error response.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.AddUniversity(RestService.Models.UniversityModel)">
            <summary>
            Adds the university.
            This API is accessible to only super admin user.
            </summary>
            <param name="universityModel">The university model.</param>
            <returns>The university added confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.UpdateUniversity(RestService.Models.UniversityModel)">
            <summary>
            Updates the university.
            University id is required to update university other fields are optional, passed only fields required to update.
            This API is accessible to only super admin user.
            </summary>
            <param name="universityModel">The university model.</param>
            <returns>The university updated confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.DeleteUniversity(System.Int32)">
            <summary>
            Deletes the university for given identifier.
            This API is accessible to only super admin user.
            </summary>
            <param name="universityID">The university identifier.</param>
            <returns>The university deleted confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.AddCampusToUniversity(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds the campus to university.
            This API is accessible to only super admin user.
            </summary>
            <param name="universityId">The university identifier.</param>
            <param name="campusIds">The campus ids.</param>
            <returns>The campus added to university confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.UniversityController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:RestService.Controllers.UserController.GetCurrentUser">
            <summary>
            Gets the logged-in user.
            </summary>
            <returns>The user detail.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.GetCurrentUserWithCampus">
            <summary>
            Gets the logged-in user with it's accessible campus.
            </summary>
            <returns>The user detail with campus.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.GetAllUsers">
            <summary>
            Gets all users.
            This API is accessible to only super admin user.
            </summary>
            <returns>The user details.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.UpdateUser(RestService.Models.UserModel)">
            <summary>
            Updates the user.
            Can only update logged-in user, Passed only fields required to update
            </summary>
            <param name="userModel">The user model.</param>
            <returns>The user updated confirmation, or bad request error response if invalid parameters.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.UpdateUserByClaim">
            <summary>
            Updates the user by updated b2c claim.
            It's use to update user after b2c edit profile.
            </summary>
            <returns>he user updated confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.DeleteUser">
            <summary>
            Deletes the logged-in user.
            It's used to delete user on removing user from b2c.
            </summary>
            <returns>The user deleted confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.AssignRoleToUser(System.Int32,System.Int32)">
            <summary>
            Assigns the role to user.
            This API is accessible to only super admin user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="roleId">The role identifier.</param>
            <returns>The user role assignment confirmation.</returns>
        </member>
        <member name="M:RestService.Controllers.UserController.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources that are used by the object and, optionally, releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:RestService.Models.ResponseModel">
            <summary>
            Provides status of current operations.
            </summary>
        </member>
        <member name="P:RestService.Models.ResponseModel.Status_Code">
            <summary>
            Gives status of current operation.
            200 (Ok) -> Operation completed successfully.
            0 (Error) -> operation failed.
            </summary>
            <value>
            The status code.
            </value>
        </member>
        <member name="P:RestService.Models.ResponseModel.Message">
            <summary>
            Gives process response, success or failure message.
            </summary>
            <value>
            The response message.
            </value>
        </member>
        <member name="M:RestService.Services.Impl.AlertService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.AlertService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.AlertService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.AnomalyService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.AnomalyService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.AnomalyService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.ApplicationConfigurationService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.ApplicationConfigurationService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.BuildingService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.CampusService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.ClassroomService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.ClassroomService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.ClassroomService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.FeedbackService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.FeedbackService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.FeedbackService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.InsightService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.InsightService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.InsightService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.MeterService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.MeterService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.MeterService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.PiServerService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.QuestionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.QuestionService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.QuestionService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.RoleService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.SensorService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.SensorService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.SensorService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.UniversityService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.UserService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RestService.Services.Impl.UserService"/> class.
            </summary>
        </member>
        <member name="M:RestService.Services.Impl.UserService.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:RestService.Services.IAlertService">
            <summary>
            Provides alert operations.
            </summary>
            <seealso cref="T:RestService.Services.IAlertService" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:RestService.Services.IAlertService.GetAllAlerts">
            <summary>
            Gets all alerts.
            </summary>
            <returns>The alerts.</returns>
        </member>
        <member name="M:RestService.Services.IAlertService.GetAlertDetails(System.Int32)">
            <summary>
            Gets the alert details.
            </summary>
            <param name="sensorLogId">The sensor log identifier.</param>
            <returns>The alert details.</returns>
        </member>
        <member name="M:RestService.Services.IAlertService.AcknowledgeAlert(RestService.Models.AlertModel)">
            <summary>
            Acknowledges the alert.
            </summary>
            <param name="alertDetail">The alert detail.</param>
            <returns>The alert acknowledgment.</returns>
        </member>
        <member name="M:RestService.Services.IAlertService.GetRecommendations">
            <summary>
            Gets all recommendations.
            </summary>
            <returns>The recommendation.</returns>
        </member>
        <member name="T:RestService.Services.IAnomalyService">
            <summary>
            Provides anomaly info.
            </summary>
        </member>
        <member name="M:RestService.Services.IAnomalyService.GetAnomalyDetails(System.String)">
            <summary>
            Gets the anomaly details.
            </summary>
            <param name="timeStamp">The time stamp.</param>
            <returns>The anomaly info.</returns>
        </member>
        <member name="T:RestService.Services.IApplicationConfigurationService">
            <summary>
            Provides operations to perform CRUD on application configuration.
            </summary>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.GetAllApplicationConfiguration">
            <summary>
            Gets all application configuration.
            </summary>
            <returns>The application configuration list.</returns>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.GetApplicationConfiguration(System.String)">
            <summary>
            Gets the application configuration for given configuration type..
            </summary>
            <param name="applicationConfigurationType">Type of the application configuration.</param>
            <returns>The application configuration.</returns>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.AddApplicationConfiguration(RestService.Models.ApplicationConfigurationModel)">
            <summary>
            Adds the application configuration.
            </summary>
            <param name="applicationConfigurationModel">The application configuration model.</param>
            <returns>Application configuration added confirmation.</returns>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.DeleteApplicationConfiguration(System.String)">
            <summary>
            Deletes the application configuration.
            </summary>
            <param name="applicationConfigurationType">Type of the application configuration.</param>
            <returns>Application configuration deleted confirmation.</returns>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.UpdateApplicationConfigurationEntry(RestService.Models.ApplicationConfigurationEntryModel)">
            <summary>
            Updates the application configuration entry.
            </summary>
            <param name="applicationConfigurationEntryModel">The application configuration entry model.</param>
            <returns>Application configuration entry update confirmation.</returns>
        </member>
        <member name="M:RestService.Services.IApplicationConfigurationService.DeleteApplicationConfigurationEntry(System.Int32)">
            <summary>
            Deletes the application configuration entry.
            </summary>
            <param name="applicationConfigurationEntryId">The application configuration entry identifier.</param>
            <returns>Application configuration entry deleted confirmation.</returns>
        </member>
        <member name="T:RestService.Services.IBlobStorageService">
            <summary>
            Provides blob storage operations.
            </summary>
        </member>
        <member name="M:RestService.Services.IBlobStorageService.UploadBlob(RestService.Models.BlobStorageModel)">
            <summary>
            Uploads the blob to blob storage, override blob if exist already.
            Create public container if not exists already.
            </summary>
            <param name="blobStorageModel">The BLOB storage model.</param>
        </member>
        <member name="M:RestService.Services.IBlobStorageService.RenameBlob(RestService.Models.BlobStorageModel,System.String)">
            <summary>
            Rename existing blob.
            </summary>
            <param name="oldBlob">The old BLOB.</param>
            <param name="newBlobName">New name of the BLOB.</param>
        </member>
        <member name="M:RestService.Services.IBlobStorageService.DeleteBlob(RestService.Models.BlobStorageModel)">
            <summary>
            Deletes the BLOB if exists.
            </summary>
            <param name="blobStorageModel">The BLOB storage model.</param>
        </member>
        <member name="M:RestService.Services.IBuildingService.GetAllBuildings">
            <summary>
            Get all the Buildings
            </summary>
            <returns>Returns list of all Buildings</returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.GetBuildingByID(System.Int32)">
            <summary>
            Get a Building by ID
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>
            Returns a specific Building by fetching based on BuildingID
            </returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.GetBuildingsByCampus(System.Int32)">
            <summary>
            Gets the buildings by campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>Buildings associated with given campus id.</returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.GetBuildingByLocation(System.Decimal,System.Decimal)">
            <summary>
            Gets the building by location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The building situated at given location.</returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.AddBuilding(RestService.Models.BuildingModel)">
            <summary>
            Inserts a new Building in system
            </summary>
            <param name="model">Building model</param>
            <returns>Insert acknowledgment</returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.DeleteBuilding(System.Int32)">
            <summary>
            Removes an existing Building from system
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>
            Delete acknowledgment.
            </returns>
        </member>
        <member name="M:RestService.Services.IBuildingService.UpdateBuilding(RestService.Models.BuildingModel)">
            <summary>
            Updates information of an existing Building
            </summary>
            <param name="model">Building model</param>
            <returns>
            Update acknowledgment.
            </returns>
        </member>
        <member name="T:RestService.Services.ICampusService">
            <summary>
            Provides campus related operations.
            </summary>
        </member>
        <member name="M:RestService.Services.ICampusService.GetAllCampus">
            <summary>
            Get all the campus
            </summary>
            <returns>Returns list of all campuses</returns>
        </member>
        <member name="M:RestService.Services.ICampusService.GetCampusByID(System.Int32)">
            <summary>
            Get a Campus by ID
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>
            Returns a specific Campus by fetching based on CampusID
            </returns>
        </member>
        <member name="M:RestService.Services.ICampusService.GetCampusByLocation(System.Decimal,System.Decimal)">
            <summary>
            Gets the campus by location.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <returns>The campus situated at given location.</returns>
        </member>
        <member name="M:RestService.Services.ICampusService.AddCampus(RestService.Models.CampusModel)">
            <summary>
            Inserts a new Campus in system
            </summary>
            <param name="model">Campus model</param>
            <returns>
            Insert acknowledgment.
            </returns>
        </member>
        <member name="M:RestService.Services.ICampusService.DeleteCampus(System.Int32)">
            <summary>
            Removes an existing Campus from system
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>
            Delete acknowledgment.
            </returns>
        </member>
        <member name="M:RestService.Services.ICampusService.UpdateCampus(RestService.Models.CampusModel)">
            <summary>
            Updates information of an existing Campus
            </summary>
            <param name="model">Campus model</param>
            <returns>Update acknowledgment</returns>
        </member>
        <member name="M:RestService.Services.ICampusService.AssignRolesToCampus(System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Assigns the roles to campus.
            </summary>
            <param name="roleIds">The role ids.</param>
            <param name="campusId">The campus identifier.</param>
            <returns>
            Roles Assigned acknowledgment.
            </returns>
        </member>
        <member name="M:RestService.Services.ICampusService.AddBuildingsToCampus(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds the buildings to campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <param name="buildingIds">The building ids.</param>
            <returns>Association confirmation.</returns>
        </member>
        <member name="T:RestService.Services.IClassroomService">
            <summary>
            Provides classroom operation.
            </summary>
        </member>
        <member name="M:RestService.Services.IClassroomService.GetAllClassrooms">
            <summary>
            Gets all classrooms.
            </summary>
            <returns>All classrooms data</returns>
        </member>
        <member name="M:RestService.Services.IClassroomService.GetClassroomByBuilding(System.Int32)">
            <summary>
            Gets all building's classrooms.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>
            The building's classrooms.
            </returns>
        </member>
        <member name="T:RestService.Services.IEmailService">
            <summary>
            Provides operation to send mail.
            </summary>
        </member>
        <member name="M:RestService.Services.IEmailService.SendMail(RestService.Models.EmailModel)">
            <summary>
            Sends the mail.
            </summary>
            <param name="emailModel">The email model.</param>
            <returns>
            Mail send confirmation.
            </returns>
        </member>
        <member name="T:RestService.Services.IFeedbackService">
            <summary>
            Provides student feedback operations.
            </summary>
        </member>
        <member name="M:RestService.Services.IFeedbackService.StoreFeedback(RestService.Models.FeedbackModel)">
            <summary>
            Stores the student feedback for a classroom.
            </summary>
            <param name="feedbackModel">The feedbackModel to be stored.</param>
            <returns>
            The feedback stored confirmation.
            </returns>
        </member>
        <member name="M:RestService.Services.IFeedbackService.GetAllFeedback">
            <summary>
            Gets all feedback.
            </summary>
            <returns>All stored feedbacks.</returns>
        </member>
        <member name="M:RestService.Services.IFeedbackService.DeleteFeedback(System.Int32)">
            <summary>
            Deletes the feedback.
            </summary>
            <param name="feedbackId">The feedback identifier to be deleted.</param>
            <returns>The feedback deleted confirmation.</returns>
        </member>
        <member name="M:RestService.Services.IFeedbackService.UpdateFeedback(RestService.Models.FeedbackModel)">
            <summary>
            Updates the feedback.
            </summary>
            <param name="feedbackModel">The feedbackModel to be updated.</param>
            <returns>
            The feedback updated confirmation
            </returns>
        </member>
        <member name="M:RestService.Services.IFeedbackService.GetFeedbackCount(System.Int32)">
            <summary>
            Gets the feedback for given classroom.
            </summary>
            <param name="classId">The class identifier.</param>
            <returns>
            The class feedback.
            </returns>
        </member>
        <member name="M:RestService.Services.IFeedbackService.ResetFeedback">
            <summary>
            Resets or remove all feedback.
            </summary>
            <returns>The Feedback reset confirmation.</returns>
        </member>
        <member name="T:RestService.Services.IInsightService">
            <summary>
            Provides consumption and prediction operations.
            </summary>
        </member>
        <member name="M:RestService.Services.IInsightService.GetInsightData">
            <summary>
            Gets the insight data.
            </summary>
            <returns>The consumption and prediction of electricity.</returns>
        </member>
        <member name="M:RestService.Services.IInsightService.GetInsightDataByBuilding(System.Int32)">
            <summary>
            Gets the insight data by building.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>The consumption and prediction of electricity for given building.</returns>
        </member>
        <member name="M:RestService.Services.IInsightService.GetInsightDataByCampus(System.Int32)">
            <summary>
            Gets the insight data by campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>The consumption and prediction of electricity for given campus.</returns>
        </member>
        <member name="T:RestService.Services.IMeterService">
            <summary>
            Provides meter related operations.
            </summary>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMeterList(System.Int32)">
            <summary>
            Gets the meter list.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <returns>
            All meter details.
            </returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMeterMonthlyConsumption(System.Int32)">
            <summary>
            Gets the meter monthly consumption.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <returns>The current month consumption.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMonthlyConsumptionPerCampus(System.Int32)">
            <summary>
            Gets the meter monthly consumption per campus.
            </summary>
            <param name="campusId">The campus identifier.</param>
            <returns>
            The current month electricity consumption per campus
            </returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMonthlyConsumptionPerBuildings(System.Int32)">
            <summary>
            Gets the meter monthly consumption per building.
            </summary>
            <param name="buildingId">The building identifier.</param>
            <returns>
            The current month electricity consumption per building.
            </returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMeterDailyConsumption(System.Int32)">
            <summary>
            Gets the meter daily consumption.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <returns>The todays consumption.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMonthWiseConsumption(System.Int32,System.Int32)">
            <summary>
            Gets the month wise consumption.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="year">The year.</param>
            <returns>The month wise consumptions for given year/</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetMonthWiseConsumptionForOffset(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the month wise consumption for offset.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <param name="offset">The offset.</param>
            <returns>The consumption for given period.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetWeekWiseMonthlyConsumption(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the week wise monthly consumption.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>The week wise consumption for given month and year.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetWeekWiseMonthlyConsumptionForOffset(System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the week wise monthly consumption for offset.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <param name="offset">The offset.</param>
            <returns>The week wise consumption for given period.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetDayWiseMonthlyConsumption(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the day wise monthly consumption.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>The day wise consumption for given month and year.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetDayWiseCurrentMonthPrediction(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the day wise current month prediction.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>The day wise prediction for given month and year.</returns>
        </member>
        <member name="M:RestService.Services.IMeterService.GetDayWiseNextMonthPrediction(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the day wise next month prediction.
            </summary>
            <param name="buildingId">The building identifier for which to get electricity consumption.</param>
            <param name="month">The month.</param>
            <param name="year">The year.</param>
            <returns>The day wise prediction of given's next month.</returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.GetAllPiServers">
            <summary>
            Get all the PiServers
            </summary>
            <returns>Returns list of all PiServers</returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.GetPiServerByID(System.Int32)">
            <summary>
            Get a PiServer by ID
            </summary>
            <param name="piServerID">PiServer ID</param>
            <returns>Returns a specific PiServer by fetching based on PiServerID</returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.GetPiServerByName(System.String)">
            <summary>
            Get a PiServer by Name
            </summary>
            <param name="piServerName">Name of the pi server.</param>
            <returns>
            Returns a specific PiServer by fetching based on PiServer name
            </returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.AddPiServer(RestService.Models.PiServerModel)">
            <summary>
            Inserts a new PiServer in system
            </summary>
            <param name="model">PiServer model</param>
            <returns>Insert acknowledgment.</returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.DeletePiServer(System.Int32)">
            <summary>
            Removes an existing PiServer from system
            </summary>
            <param name="piServerId">The pi server identifier.</param>
            <returns>
            Delete acknowledgment.
            </returns>
        </member>
        <member name="M:RestService.Services.IPiServerService.UpdatePiServer(RestService.Models.PiServerModel)">
            <summary>
            Updates information of an existing PiServer
            </summary>
            <param name="model">PiServer model</param>
            <returns>Update acknowledgment.</returns>
        </member>
        <member name="T:RestService.Services.IQuestionService">
            <summary>
            Provides classroom questions operation.
            </summary>
        </member>
        <member name="M:RestService.Services.IQuestionService.GetQuestionAnswers">
            <summary>
            Gets the question answers for all classroom.
            </summary>
            <returns>The clasroom question answer details.</returns>
        </member>
        <member name="M:RestService.Services.IRoleService.GetAllRoles">
            <summary>
            Get all the roles
            </summary>
            <returns>Returns list of all roles</returns>
        </member>
        <member name="M:RestService.Services.IRoleService.GetRoleByID(System.Int32)">
            <summary>
            Get a Role by ID
            </summary>
            <param name="roleId">Role ID</param>
            <returns>Returns a specific Role by fetching based on RoleID</returns>
        </member>
        <member name="M:RestService.Services.IRoleService.AddRole(RestService.Models.RoleModel)">
            <summary>
            Inserts a new Role in system
            </summary>
            <param name="model">Role model</param>
            <returns>Insert acknowledgment</returns>
        </member>
        <member name="M:RestService.Services.IRoleService.DeleteRole(System.Int32)">
            <summary>
            Removes an existing Role from system
            </summary>
            <param name="roleId">The role identifier to be deleted.</param>
            <returns>
            Delete acknowledgment
            </returns>
        </member>
        <member name="M:RestService.Services.IRoleService.UpdateRole(RestService.Models.RoleModel)">
            <summary>
            Updates information of an existing Role
            </summary>
            <param name="model">Role model</param>
            <returns>Update acknowledgment</returns>
        </member>
        <member name="M:RestService.Services.IRoleService.GetNewUserRole">
            <summary>
            Gets the new user role.
            </summary>
            <returns>Return super user role it it's not exist else return student role.</returns>
        </member>
        <member name="T:RestService.Services.ISensorService">
            <summary>
            Provides sensors operations.
            </summary>
        </member>
        <member name="M:RestService.Services.ISensorService.GetAllSensors">
            <summary>
            Gets all sensors.
            </summary>
            <returns>All sensors list.</returns>
        </member>
        <member name="M:RestService.Services.ISensorService.GetAllMapSensors">
            <summary>
            Gets all mapped sensors.
            </summary>
            <returns>All mapped sensors.</returns>
        </member>
        <member name="M:RestService.Services.ISensorService.GetAllUnMapSensors">
            <summary>
            Gets all unmapped sensors.
            </summary>
            <returns>All unmapped sensors.</returns>
        </member>
        <member name="M:RestService.Services.ISensorService.MapSensor(System.Int32,System.Int32)">
            <summary>
            Maps the sensor to classroom.
            </summary>
            <param name="sensorId">The sensor identifier.</param>
            <param name="classId">The class identifier.</param>
            <returns>
            The sensor mapped confirmation.
            </returns>
        </member>
        <member name="M:RestService.Services.ISensorService.GetAllSensorsForClass(System.Int32)">
            <summary>
            Gets all sensors for class.
            </summary>
            <param name="classId">The class identifier.</param>
            <returns>
            The class sensors.
            </returns>
        </member>
        <member name="M:RestService.Services.ISensorService.ResetSensors">
            <summary>
            Resets or remove all sensors.
            </summary>
            <returns>The reset sensor confirmation. </returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.GetAllUniversities">
            <summary>
            Get all the universities
            </summary>
            <returns>Returns list of all universities</returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.GetUniversityByID(System.Int32)">
            <summary>
            Get a university by ID
            </summary>
            <param name="universityID">University ID</param>
            <returns>Returns a specific University by fetching based on UniversityID</returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.AddUniversity(RestService.Models.UniversityModel)">
            <summary>
            Inserts a new University in system
            </summary>
            <param name="model">University model</param>
            <returns>Insert acknowledgement</returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.DeleteUniversity(System.Int32)">
            <summary>
            Removes an existing university from system
            </summary>
            <param name="universityId">The university identifier.</param>
            <returns>
            Delete acknowledgement
            </returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.UpdateUniversity(RestService.Models.UniversityModel)">
            <summary>
            Updates information of an existing university
            </summary>
            <param name="model">University model</param>
            <returns>Update acknowledgement</returns>
        </member>
        <member name="M:RestService.Services.IUniversityService.AddCampusesToUniversity(System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds the campuses to university.
            </summary>
            <param name="universityId">The university identifier.</param>
            <param name="campusIds">The campus ids.</param>
            <returns>Campus added to university confirmation</returns>
        </member>
        <member name="T:RestService.Services.IUserService">
            <summary>
            Provides user related operations.
            </summary>
        </member>
        <member name="M:RestService.Services.IUserService.CreateUser(RestService.Models.UserModel)">
            <summary>
            Creates the user.
            </summary>
            <param name="userModel">The user model.</param>
            <returns>
            Created user identifier..
            </returns>
        </member>
        <member name="M:RestService.Services.IUserService.UpdateUser(RestService.Models.UserModel)">
            <summary>
            Updates the user.
            </summary>
            <param name="userModel">The user model.</param>
            <returns>
            User updated confirmation.
            </returns>
        </member>
        <member name="M:RestService.Services.IUserService.DeleteUser(System.String)">
            <summary>
            Deletes the user for given B2C object identifier.
            </summary>
            <param name="b2cObjectIdentifier">The B2C object identifier.</param>
            <returns>User deleted confirmation</returns>
        </member>
        <member name="M:RestService.Services.IUserService.GetCurrentUser(System.String)">
            <summary>
            Gets the current user.
            </summary>
            <returns>Current loged-in user.</returns>
        </member>
        <member name="M:RestService.Services.IUserService.GetAllUser">
            <summary>
            Gets all user.
            </summary>
            <returns>All users.</returns>
        </member>
        <member name="M:RestService.Services.IUserService.AssignRoleToUser(System.Int32,System.Int32)">
            <summary>
            Assigns the role to user.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="roleId">The role identifier.</param>
            <returns>User Role assignment confirmation.</returns>
        </member>
    </members>
</doc>
